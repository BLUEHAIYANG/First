package:ctex
Title         : 算法设计实验三：动态规划
Author        : 软工1802 兰海洋  U201817003
Logo          : True

[TITLE]

# 写在前面
&emsp;&emsp;本次实验需要解决“最长公共子序列”问题，我在上学期学习《数据结构》这门课时已经了解
并实现过这个算法。但是重新看到这个问题时，我顿时感到悲哀：**我已经忘记怎么实现了**。但是我清楚地
记得如果要解决这个问题：需要一个“状态转移方程”，只要有了它我就可以很快地运用动态规划算法
来解决这个问题。

&emsp;&emsp;我忘记了这个状态转移方程。
虽然我只要动动手指就能在老师的PPT，或者随便网上搜索一下，找到我需要的这个状态转移方程。然后依据
它来实现算法即可，但是这样没有多大意义---------

&emsp;&emsp;因为我根本不知道为什么要使用动态规划，也不知道动态规划为什么是这个样子。如果一个算法
问题出现在“动态规划”的分类之下，那我掌握的只不过是，自动地开始按照动态规划的“模板”思考解决方案。这样
的状态真是太糟糕了

# 从分治法说起
&emsp;&emsp;在上一个实验中，我了解到分治法三个步骤：分，治，合，并且分治法可以为优化算法和实现算法
提供思路，“分而治之”是其核心概念---------把大问题分成小问题，逐个击破，这种方法的使用范围非常之广：
因为一旦输入规模降低，难度总是会下降；如果输入只有寥寥几个，问题立刻变得非常简单-----几乎所有的问题都
有这样的趋势。

&emsp;&emsp;所以我本能地想到，能用动态规划解决的问题难道不能用分治法解决么？我为什么不能用分治法
的思考步骤来思考那些出现在“动态规划”分类之下的算法问题？

&emsp;&emsp;当然，看到这里你可能会吐槽：**你都把动态规划学完了，怎么还会问出这个问题。**
动态规划仍然应用了“分而治之”的想法。动态规划和分治法的区别就是在于分治法的子问题是独立的
而动态规划的子问题是不独立的（存在重叠子问题）。

&emsp;&emsp;是啊，我确实得惭愧，如此看到，我在之前的学习当中不知不觉将分治法和动态规划完全当成了
风马牛不相及的两种算法设计思想，之前的学习简直是建立在空中楼阁上。接下来的实验内容，我都会以分治法
的思想为基础，体会动态规划的思想。


# 动态规划最简单的案例----斐波那契数列
* 斐波那契数列定义式：f(0) = 1; f(1) = 1; f(n) = f(n - 1) + f(n - 2);这个定义的结构实在太符合
分治法的思想了 
  * 分：输入规模n降低为了n - 1和n - 2
  * 治：规模降低到0 和 1，直接有解
  * 合：依据定义合并解即可。
  
  简直顺理成章，水到渠成。这就是妥妥的分治法思想！
  唯一的问题只在于递归调用树是指数阶的。有太多的相同的子问题被重复计算。

![QQ截图20200426143128]

[QQ截图20200426143128]: images/QQ-20200426143128.png "QQ截图20200426143128" { width:auto; max-width:70% }
* 为了解决相同子问题被重复计算的问题，只要引入“记忆”功能即可。将已经计算出的子问题结果存储起来，
以后需要的话。只需要直接拿结果即可。这张图我非常喜欢，感觉说出了动态规划的精髓

![QQ截图20200426143449]

[QQ截图20200426143449]: images/QQ-20200426143449.png "QQ截图20200426143449" { width:auto; max-width:90% }

***我想这就是动态规划和分治法最大的（我甚至觉得可以说是“唯一的”）区别了。***

# 只不过是合并步骤有点新意------硬币找零问题

* 问题：如果我们有面值为1元、3元和5元的硬币若干枚，如何用最少的硬币凑够11元？
  * 分：把11元分成两堆，有这些种分法：1和10元，2和9，...，5和6，或者0元和唯一的一张11元纸币（假如存在）
  * 治：规模降低到0时，直接有解f(0) = 0;
  * 合：
  
  > f(n) = min\[f(n - 1) + f(1),f(n - 2) + f(2),....,f(n/2) + f(n - n / 2)\]，若没有面值为n的纸币。
  
  > f(n) = 1,若有面值为n的纸币。
  
 这不就得了！在上次实验当中，我们提到，合并步骤的是分治法的关键和精髓，在这里也是如此。
 
 但是，动态规划的分解与常规分治法的分法还是有区别的：常规分治法往往分解成规模相等的几部分，
 而动态规划的分解方式显然更加灵活，在本例中，用5种方式将11元分成了两堆。在下一个例子当中，
 动态规划对于子问题的分解的灵活性体现的更加明显------------


# 只不过是分解步骤有些新意------最长公共子序列
&emsp;&emsp;这一部分与开头相呼应。我尝试避免毫无根据地使用动态规划，而打算从分治法的模式开始
尝试解决。在这个过程中，暴露了我在分解问题时非常机械：

&emsp;&emsp;**我好像只会尝试将输入规模n对半分**



[reference manual]: http://research.microsoft.com/en-us/um/people/daan/madoko/doc/reference.html  "Madoko reference manual"
