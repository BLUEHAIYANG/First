package:ctex
Title         : 贪婪算法
Author        : 软工1802  兰海洋  U201817003
Logo          : True

[TITLE]

# 写在前面
&emsp;&emsp;维基百科词条将分治法，动态规划，贪婪算法放在同一个分类之下。在学习的过程中我能够明显地
感受到贪婪算法与前二者之间存在紧密的联系，尤其是动态规划。

* 动态规划在构建最优解的过程中不断回溯
* 而贪婪算法永不回头

&emsp;&emsp;贪婪算法可以说是“最简单”的算法思想，因为选择当前情况下的最优解总是不太困难的，
构建一个局部最优解的耗费也必然少于全局最优解。但是贪婪也会带来“短视”的弊端，局部最优未必是全局最优，
就仿佛是，我们在人生的每个阶段都做自以为是最好的选择，最后也未必能得到人生的最优解。

* 除非我们能够证明当前做出的选择就是这辈子在这个年龄段的最好选择。那么我们会毫无迷茫（不用回溯）地走下去
* 一旦证明了正确性，贪婪算法往往就是最高效的一类算法，因为一条路走到黑，心无旁骛。
那么，要怎样证明贪婪算法的正确性呢？

# “剪切法”
&emsp;&emsp;简单粗暴的做法。应用起来十分方便。以下是我选的最简单的案例，先体会剪切法的思想

## 求A到C的最近距离


![QQ截图20200428180203]

[QQ截图20200428180203]: images/QQ-20200428180203.png "QQ截图20200428180203" { width:auto; max-width:90% }

&emsp;&emsp;我想应该所有人都会选择


[reference manual]: http://research.microsoft.com/en-us/um/people/daan/madoko/doc/reference.html  "Madoko reference manual"
